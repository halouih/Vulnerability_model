"""

TO READ BEFORE USAGE


This script runs through the command line

1) cd to the Vulnerability_model folder
2) type on the command line :
   python radar_chart.py --country NAME_OF_COUNTRY_IN_CAPITAL_LETTERS
3) if you would like only one indicator (the number 1 for example), type :
   python radar_chart.py --country NAME_OF_COUNTRY_IN_CAPITAL_LETTERS --indicator 1
4) if you would like the charts for all countries and all indicators, type :
   python radar_chart.py

The charts are saved in the results folder.


"""




import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import argparse


# Use ful stuff, we do not use Landslide and Tsunami
hazards = ['Coastal flood', 'Cyclone', 'Earthquake', 'Flood', 'Volcanic', 'Water scarcity']
hazards_full = ['Coastal flood', 'Cyclone', 'Earthquake', 'Flood', 'Landslide', 'Tsunami', 'Volcanic', 'Water scarcity']
indicators = {1:'Risk_Capa_ratio', 2:'Risk_Capital_ratio', 3:'Output_days'}
indicators_bis = {1:'Risk Capacity ratio', 2:'Risk Capital ratio', 3:'Output days'}
indicators_legend = {1:'Percentage of the total national capacity',
                     2:'Percentage of the total national capital expenditure',
                     3:'Mean loss of output in days'}

df = pd.read_csv("results/results.csv")
dg = df.drop(df.index[[0,1]])
country_list = list(dg['Unnamed: 0']) # Country list

# Reading the results dataframe
df = pd.read_csv("results/results.csv")


# The following function selects the data regarding one specific indicator
def chose_indicator(n_indicator):
    
    indicator = indicators[n_indicator]
    
    dg = df[['Unnamed: 0',indicator,indicator+'.1',indicator+'.2',indicator+'.3',indicator+'.4',indicator+'.5',indicator+'.6',indicator+'.7']]
    dg.columns = ['COUNTRY']+hazards_full
    dg = dg.drop(dg.index[[0,1]])
    
    # Get rid of Landslide and Tsunami
    del dg['Landslide']
    del dg['Tsunami']
    dg = dg.set_index('COUNTRY')
    
    return dg


# Using the previous function, the following function plotts the radar chart for a specific country and for a specific indicator
def get_radar_chart(country, n_indicator):
    
    stats = chose_indicator(n_indicator).loc[country,hazards].values
    stats = list(map(lambda x: round(float(x),2), stats))

    angles = np.linspace(0, 2*np.pi, len(hazards), endpoint=False)
    # close the plot
    stats = np.concatenate((stats,[stats[0]]))
    angles = np.concatenate((angles,[angles[0]]))

    fig = plt.figure()
    ax = fig.add_subplot(111, polar=True)
    ax.plot(angles, stats, 'o-', linewidth=2, label=indicators_legend[n_indicator])
    plt.legend(bbox_to_anchor=(1., 0.), framealpha=0)
    ax.fill(angles, stats, alpha=0.25)
    ax.set_thetagrids(angles * 180/np.pi, hazards)
    ax.set_title(country+" - "+indicators_bis[n_indicator])
    ax.grid(color='0.75')
    
    plt.savefig("results/"+country+"_"+indicators[n_indicator]+".png", transparent=True)


# Command line code
parser = argparse.ArgumentParser(description='Charts')
parser.add_argument('--country', type=str, default=None, help='Country to select for plotting.')
parser.add_argument('--indicator', type=int, default=None, help='Indicator to plot 1 is for capacity, 2 is for capital, 3 is for loss of output.')


def main():
    
    args = parser.parse_args()
    # If no argument, provide graphs for all countries and all indicators
    if args.country is None:
        for country in country_list:
            for i in range(1,4):
                get_radar_chart(country, i)
                print("Radar chart for "+indicators_bis[i]+" "+country+" completed")
    # If the country is specified, then...
    elif args.country not in country_list:
        print("Please select a valid country...(country name in capital letters)")
    else:
        if args.indicator is None:
            for i in range(1,4):
                get_radar_chart(args.country, i)
        elif args.indicator not in [1,2,3]:
            print("Please type an indicator between 1 and 3...")
        else:
            get_radar_chart(args.country, args.indicator)

if __name__ == "__main__":
    main()
